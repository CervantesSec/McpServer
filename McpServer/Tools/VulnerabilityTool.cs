using McpServer.Models;
using McpServer.Services;
using Microsoft.Extensions.Logging;
using ModelContextProtocol.Server;
using System.ComponentModel;

namespace McpServer.Tools;

[McpServerToolType]
public class VulnerabilityTool
{
    private readonly CervantesApiClient _apiClient;
    private readonly ILogger<VulnerabilityTool> _logger;

    public VulnerabilityTool(CervantesApiClient apiClient, ILogger<VulnerabilityTool> logger)
    {
        _apiClient = apiClient;
        _logger = logger;
    }

    [McpServerTool, Description("Get all vulnerabilities")]
    public async Task<List<Vuln>> GetVulnerabilitiesAsync(CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Fetching all vulnerabilities");
        var vulns = await _apiClient.GetAsync<List<Vuln>>("api/Vuln", cancellationToken);
        return vulns ?? new List<Vuln>();
    }

    [McpServerTool, Description("Get a specific vulnerability by ID")]
    public async Task<Vuln?> GetVulnerabilityByIdAsync(
        [Description("Vulnerability ID")] Guid id,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Fetching vulnerability with ID: {VulnId}", id);
        return await _apiClient.GetAsync<Vuln>($"api/Vuln/{id}", cancellationToken);
    }

    [McpServerTool, Description("Create a new vulnerability")]
    public async Task<Vuln?> CreateVulnerabilityAsync(
        [Description("Vulnerability name")] string name,
        [Description("Project ID")] Guid projectId,
        [Description("Vulnerability category ID")] Guid vulnCategoryId,
        [Description("Risk level (0=Info, 1=Low, 2=Medium, 3=High, 4=Critical)")] int risk,
        [Description("Status (0=Open, 1=Confirmed, 2=Resolved, 3=OutOfScope, 4=Accepted, 5=Invalid)")] int status = 0,
        [Description("Vulnerability description")] string? description = null,
        [Description("Impact description")] string? impact = null,
        [Description("Proof of concept")] string? proofOfConcept = null,
        [Description("Remediation steps")] string? remediation = null,
        [Description("CWE ID")] Guid? vulnCweId = null,
        [Description("Is template")] bool template = false,
        [Description("Language (0=English, 1=Español)")] int language = 0,
        [Description("Complexity (0=High, 1=Medium, 2=Low)")] int remediationComplexity = 1,
        [Description("Priority (0=High, 1=Medium, 2=Low)")] int remediationPriority = 1,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Creating new vulnerability: {VulnName}", name);
        
        var vulnData = new VulnCreateViewModel
        {
            Name = name,
            ProjectId = projectId,
            VulnCategoryId = vulnCategoryId,
            VulnCweId = vulnCweId,
            Risk = (VulnRisk)risk,
            Status = (VulnStatus)status,
            Description = description,
            Impact = impact,
            ProofOfConcept = proofOfConcept,
            Remediation = remediation,
            Template = template,
            Language = (Language)language,
            RemediationComplexity = (RemediationComplexity)remediationComplexity,
            RemediationPriority = (RemediationPriority)remediationPriority
        };

        return await _apiClient.PostAsync<VulnCreateViewModel, Vuln>("api/Vuln", vulnData, cancellationToken);
    }

    [McpServerTool, Description("Update an existing vulnerability")]
    public async Task<Vuln?> UpdateVulnerabilityAsync(
        [Description("Vulnerability ID")] Guid id,
        [Description("Vulnerability name")] string name,
        [Description("Project ID")] Guid projectId,
        [Description("Vulnerability category ID")] Guid vulnCategoryId,
        [Description("Risk level (0=Info, 1=Low, 2=Medium, 3=High, 4=Critical)")] int risk,
        [Description("Status (0=Open, 1=Confirmed, 2=Resolved, 3=OutOfScope, 4=Accepted, 5=Invalid)")] int status = 0,
        [Description("Vulnerability description")] string? description = null,
        [Description("Impact description")] string? impact = null,
        [Description("Proof of concept")] string? proofOfConcept = null,
        [Description("Remediation steps")] string? remediation = null,
        [Description("CWE ID")] Guid? vulnCweId = null,
        [Description("Is template")] bool template = false,
        [Description("Language (0=English, 1=Español)")] int language = 0,
        [Description("Complexity (0=High, 1=Medium, 2=Low)")] int remediationComplexity = 1,
        [Description("Priority (0=High, 1=Medium, 2=Low)")] int remediationPriority = 1,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Updating vulnerability: {VulnId}", id);
        
        var vulnData = new VulnCreateViewModel
        {
            Name = name,
            ProjectId = projectId,
            VulnCategoryId = vulnCategoryId,
            VulnCweId = vulnCweId,
            Risk = (VulnRisk)risk,
            Status = (VulnStatus)status,
            Description = description,
            Impact = impact,
            ProofOfConcept = proofOfConcept,
            Remediation = remediation,
            Template = template,
            Language = (Language)language,
            RemediationComplexity = (RemediationComplexity)remediationComplexity,
            RemediationPriority = (RemediationPriority)remediationPriority
        };

        return await _apiClient.PutAsync<VulnCreateViewModel, Vuln>("api/Vuln", vulnData, cancellationToken);
    }

    [McpServerTool, Description("Delete a vulnerability")]
    public async Task<bool> DeleteVulnerabilityAsync(
        [Description("Vulnerability ID")] Guid id,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Deleting vulnerability: {VulnId}", id);
        return await _apiClient.DeleteAsync($"api/Vuln/{id}", cancellationToken);
    }

    [McpServerTool, Description("Get vulnerabilities for a specific client")]
    public async Task<List<Vuln>> GetVulnerabilitiesByClientAsync(
        [Description("Client ID")] Guid clientId,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Fetching vulnerabilities for client: {ClientId}", clientId);
        var vulns = await _apiClient.GetAsync<List<Vuln>>($"api/Vuln/Client/{clientId}", cancellationToken);
        return vulns ?? new List<Vuln>();
    }

    [McpServerTool, Description("Get vulnerabilities for a specific project")]
    public async Task<List<Vuln>> GetVulnerabilitiesByProjectAsync(
        [Description("Project ID")] Guid projectId,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Fetching vulnerabilities for project: {ProjectId}", projectId);
        var vulns = await _apiClient.GetAsync<List<Vuln>>($"api/Vuln/Project/{projectId}", cancellationToken);
        return vulns ?? new List<Vuln>();
    }

    [McpServerTool, Description("Get vulnerability templates")]
    public async Task<List<Vuln>> GetVulnTemplatesAsync(CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Fetching vulnerability templates");
        var templates = await _apiClient.GetAsync<List<Vuln>>("api/Vuln/Templates", cancellationToken);
        return templates ?? new List<Vuln>();
    }

    [McpServerTool, Description("Get all vulnerability categories")]
    public async Task<List<VulnCategory>> GetVulnCategoriesAsync(CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Fetching vulnerability categories");
        var categories = await _apiClient.GetAsync<List<VulnCategory>>("api/Vuln/Categories", cancellationToken);
        return categories ?? new List<VulnCategory>();
    }

    [McpServerTool, Description("Get all CWE (Common Weakness Enumeration) entries")]
    public async Task<List<VulnCwe>> GetVulnCwesAsync(CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Fetching CWE entries");
        var cwes = await _apiClient.GetAsync<List<VulnCwe>>("api/Vuln/Cwe", cancellationToken);
        return cwes ?? new List<VulnCwe>();
    }

    [McpServerTool, Description("Get vulnerabilities by CWE ID")]
    public async Task<List<Vuln>> GetVulnByCweAsync(
        [Description("CWE ID")] Guid cweId,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Fetching vulnerabilities for CWE: {CweId}", cweId);
        var vulns = await _apiClient.GetAsync<List<Vuln>>($"api/Vuln/Cwe/{cweId}", cancellationToken);
        return vulns ?? new List<Vuln>();
    }

    [McpServerTool, Description("Import vulnerabilities from external source")]
    public async Task<bool> ImportVulnerabilitiesAsync(
        [Description("Project ID")] Guid projectId,
        [Description("Import data as JSON string")] string importData,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Importing vulnerabilities for project: {ProjectId}", projectId);
        var data = new { projectId, importData };
        return await _apiClient.PostAsync($"api/Vuln/Import", data, cancellationToken);
    }

    // Vulnerability Notes Management
    [McpServerTool, Description("Get all notes for a vulnerability")]
    public async Task<List<object>> GetVulnNotesAsync(
        [Description("Vulnerability ID")] Guid vulnId,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Fetching notes for vulnerability: {VulnId}", vulnId);
        var notes = await _apiClient.GetAsync<List<object>>($"api/Vuln/Notes/{vulnId}", cancellationToken);
        return notes ?? new List<object>();
    }

    [McpServerTool, Description("Add a note to a vulnerability")]
    public async Task<bool> AddVulnNoteAsync(
        [Description("Vulnerability ID")] Guid vulnId,
        [Description("Note name")] string name,
        [Description("Note description")] string description,
        [Description("Note visibility (0=Private, 1=Public)")] int visibility = 0,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Adding note to vulnerability: {VulnId}", vulnId);
        
        var noteData = new VulnNoteViewModel
        {
            VulnId = vulnId,
            Name = name,
            Description = description,
            Visibility = (Visibility)visibility
        };

        return await _apiClient.PostAsync("api/Vuln/Note", noteData, cancellationToken);
    }

    [McpServerTool, Description("Update a vulnerability note")]
    public async Task<bool> UpdateVulnNoteAsync(
        [Description("Note ID")] Guid noteId,
        [Description("Note name")] string name,
        [Description("Note description")] string description,
        [Description("Note visibility (0=Private, 1=Public)")] int visibility = 0,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Updating vulnerability note: {NoteId}", noteId);
        
        var noteData = new VulnNoteEditViewModel
        {
            Id = noteId,
            Name = name,
            Description = description,
            Visibility = (Visibility)visibility
        };

        return await _apiClient.PutAsync("api/Vuln/Note", noteData, cancellationToken);
    }

    [McpServerTool, Description("Delete a vulnerability note")]
    public async Task<bool> DeleteVulnNoteAsync(
        [Description("Note ID")] Guid noteId,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Deleting vulnerability note: {NoteId}", noteId);
        return await _apiClient.DeleteAsync($"api/Vuln/Note/{noteId}", cancellationToken);
    }

    // Vulnerability Targets Management
    [McpServerTool, Description("Get all targets for a vulnerability")]
    public async Task<List<object>> GetVulnTargetsAsync(
        [Description("Vulnerability ID")] Guid vulnId,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Fetching targets for vulnerability: {VulnId}", vulnId);
        var targets = await _apiClient.GetAsync<List<object>>($"api/Vuln/Targets/{vulnId}", cancellationToken);
        return targets ?? new List<object>();
    }

    [McpServerTool, Description("Add a target to a vulnerability")]
    public async Task<bool> AddVulnTargetAsync(
        [Description("Vulnerability ID")] Guid vulnId,
        [Description("Target ID")] Guid targetId,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Adding target {TargetId} to vulnerability: {VulnId}", targetId, vulnId);
        
        var targetData = new VulnTargetViewModel
        {
            VulnId = vulnId,
            TargetId = targetId
        };

        return await _apiClient.PostAsync("api/Vuln/Target", targetData, cancellationToken);
    }

    [McpServerTool, Description("Remove a target from a vulnerability")]
    public async Task<bool> RemoveVulnTargetAsync(
        [Description("Vulnerability target ID")] Guid targetId,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Removing vulnerability target: {TargetId}", targetId);
        return await _apiClient.DeleteAsync($"api/Vuln/Target/{targetId}", cancellationToken);
    }

    // Vulnerability Attachments Management
    [McpServerTool, Description("Get all attachments for a vulnerability")]
    public async Task<List<object>> GetVulnAttachmentsAsync(
        [Description("Vulnerability ID")] Guid vulnId,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Fetching attachments for vulnerability: {VulnId}", vulnId);
        var attachments = await _apiClient.GetAsync<List<object>>($"api/Vuln/Attachments/{vulnId}", cancellationToken);
        return attachments ?? new List<object>();
    }

    [McpServerTool, Description("Add an attachment to a vulnerability")]
    public async Task<bool> AddVulnAttachmentAsync(
        [Description("Vulnerability ID")] Guid vulnId,
        [Description("Attachment name")] string name,
        [Description("File name")] string? fileName = null,
        [Description("File content as base64 string")] string? fileContentBase64 = null,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Adding attachment to vulnerability: {VulnId}", vulnId);
        
        byte[]? fileContent = null;
        if (!string.IsNullOrEmpty(fileContentBase64))
        {
            try
            {
                fileContent = Convert.FromBase64String(fileContentBase64);
            }
            catch (FormatException ex)
            {
                _logger.LogError(ex, "Invalid base64 format for file content");
                throw new ArgumentException("Invalid base64 format for file content", nameof(fileContentBase64));
            }
        }

        var attachmentData = new VulnAttachmentViewModel
        {
            VulnId = vulnId,
            Name = name,
            FileName = fileName,
            FileContent = fileContent
        };

        return await _apiClient.PostAsync("api/Vuln/Attachment", attachmentData, cancellationToken);
    }

    [McpServerTool, Description("Delete a vulnerability attachment")]
    public async Task<bool> DeleteVulnAttachmentAsync(
        [Description("Attachment ID")] Guid attachmentId,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Deleting vulnerability attachment: {AttachmentId}", attachmentId);
        return await _apiClient.DeleteAsync($"api/Vuln/Attachment/{attachmentId}", cancellationToken);
    }

    // Vulnerability Category Management
    [McpServerTool, Description("Create a new vulnerability category")]
    public async Task<bool> CreateVulnCategoryAsync(
        [Description("Category name")] string name,
        [Description("Category description")] string? description = null,
        [Description("Category type (0=OWASP, 1=SANS, 2=Custom)")] int type = 2,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Creating vulnerability category: {CategoryName}", name);
        
        var categoryData = new VulnCategoryCreate
        {
            Name = name,
            Description = description,
            Type = (VulnCategoryType)type
        };

        return await _apiClient.PostAsync("api/Vuln/Category", categoryData, cancellationToken);
    }

    [McpServerTool, Description("Update an existing vulnerability category")]
    public async Task<bool> UpdateVulnCategoryAsync(
        [Description("Category ID")] Guid categoryId,
        [Description("Category name")] string name,
        [Description("Category description")] string? description = null,
        [Description("Category type (0=OWASP, 1=SANS, 2=Custom)")] int type = 2,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Updating vulnerability category: {CategoryId}", categoryId);
        
        var categoryData = new VulnCategoryEdit
        {
            Id = categoryId,
            Name = name,
            Description = description,
            Type = (VulnCategoryType)type
        };

        return await _apiClient.PutAsync("api/Vuln/Category", categoryData, cancellationToken);
    }

    [McpServerTool, Description("Delete a vulnerability category")]
    public async Task<bool> DeleteVulnCategoryAsync(
        [Description("Category ID")] Guid categoryId,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Deleting vulnerability category: {CategoryId}", categoryId);
        return await _apiClient.DeleteAsync($"api/Vuln/Category/{categoryId}", cancellationToken);
    }
}